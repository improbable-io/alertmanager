// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1b\x7b\x6f\xdb\x36\xfe\x7f\x7d\x8a\xdf\x34\x1c\xd6\x00\x96\xe5\xa4\x5b\xb1\x38\x76\x0e\xae\xa3\x34\xc2\x39\x72\x20\x2b\xed\x8a\x61\x18\x68\x89\xb6\xd8\x4a\xa2\x46\x52\x49\xbc\xcc\xdf\xfd\x40\x4a\x7e\xc8\x96\x1d\x27\xe8\x12\xdf\x2d\x2d\xb6\x5a\x14\x7f\xef\x27\x45\xf2\xfe\x1e\x02\x3c\x22\x09\x06\xfd\xf7\xdf\x51\x84\x99\x88\x51\x82\xc6\x98\xe9\x30\x9d\x76\xe4\xf3\x65\xfe\x7c\x7f\x0f\x38\x09\x60\x3a\xd5\x36\x82\x5c\xbb\x3d\x09\x75\x7f\x0f\x75\xeb\x4e\x60\x96\xa0\xe8\xda\xed\xc1\x74\x6a\x7e\x6f\xaa\x79\xfc\xdf\x0c\xfb\x98\xdc\x60\xd6\x96\x93\xdc\xe2\x21\x87\x29\xb0\x97\xd1\xf3\x6c\xf8\x05\xfb\x42\xa2\xfd\x55\x82\x0c\x04\x12\x19\x87\xbf\x40\xd0\xeb\x34\x9d\x81\x92\x11\xe0\x3f\xe6\x2f\xf5\x11\x61\x24\x19\x4b\x98\xa6\x84\x51\x52\xf0\xfa\xb9\x1a\x85\xbf\x20\xc2\xc9\x32\xc5\xdf\x40\x4e\xfa\xc0\x68\x96\xf6\xd0\x10\x47\xbc\x3e\xa0\x4c\xe0\xe0\x0a\x11\xc6\xeb\x1f\x51\x94\x61\x49\xf0\x0b\x25\x09\xe8\x20\xb1\x42\x4e\x72\x2c\xe0\x8d\xc4\x55\xef\xd2\x38\xa6\x49\x0e\x7c\x50\x8c\x2d\xe1\x3b\x80\xe9\xf4\xcd\xfd\x3d\xdc\x12\x11\x96\x27\xd7\x5d\x1c\xd3\x1b\x5c\xa6\xee\xa0\x18\xf3\x42\x8d\x55\xd4\xe7\x8c\x1f\xcc\x7f\x6d\xb0\x4d\x80\xb9\xcf\x48\x2a\x08\x4d\xf4\x2d\x3a\x16\xf8\x4e\xe4\x76\xfc\x3d\x22\x5c\x14\x53\x19\x4a\xc6\x18\xea\x30\x9d\xe6\x7c\x35\xb5\xc5\xe0\xba\x9e\xa4\x56\x0c\xa5\x48\xc9\xbe\x7c\x6a\xc3\x5c\x80\x82\xb1\x9c\x78\x27\x49\xa8\x40\x92\xa7\x12\xca\xa5\xe1\xa7\xe1\x1d\xd0\x8c\xf9\xb8\x99\x1b\x13\x27\x98\x21\x41\x59\xee\x7e\x5a\x85\xa2\x4a\x3a\xe0\x11\xf2\xbf\xd6\x03\x3c\x42\x59\x24\xea\x82\x88\x08\x17\x5a\x10\x38\x4e\x23\x24\xca\xbe\x58\xdf\xa4\xf2\x32\x9e\x8c\xcb\x10\x88\xab\x50\x95\x03\x6d\x47\x7c\x23\x14\x45\x43\xe4\x7f\x5d\xc3\x57\xc9\xbe\x44\x0a\x7f\xc1\x43\x13\x23\x92\x7c\xdd\x99\x83\x94\x61\xe9\x2c\xfa\x6e\xb3\x97\xf0\x6f\x55\x80\x4a\x1b\x3b\x72\x40\x7c\x9a\xe0\x98\x7e\x21\x3b\xf2\x20\xe7\x67\x2c\xda\x95\xe3\x35\xe1\x4a\x6e\x12\x92\xd4\x0f\x91\x58\x18\x84\xd1\xf8\xe9\xc6\x5d\xc5\x16\x63\xce\xd1\xf8\x11\x8e\x57\xe2\x2d\x95\xd4\x82\x4c\x4c\xe6\xf8\xd6\xa3\xff\x71\xce\xbc\x8e\xd1\x8f\x08\x4e\xc4\xd3\x25\xde\x84\x71\x51\x37\x9e\xe6\x22\xeb\x78\x49\xc2\x05\x4a\x7c\xcc\x2b\xf0\xae\xa5\xbb\x2d\x5a\xa5\x29\x1f\xe3\x84\xe0\xa7\x1b\x69\x1b\xb2\x75\x0b\x15\xd5\x61\x43\x32\xac\x2c\x07\xda\x4a\x31\x2a\x55\xbb\x03\x68\x80\x31\x9d\x6a\xf9\x20\xe4\x83\x2a\xed\x6e\xd7\x48\xb9\x64\x2a\x22\xc6\x92\x44\x15\xf4\x5c\xcc\x69\x74\x83\x83\x15\x8a\xb3\xe1\xdd\x69\xce\x20\xd6\xa8\x1a\xbb\xa8\x94\xab\x2a\xf0\x78\x6f\x2a\x59\xfd\x86\xf8\x82\x32\x9a\xf2\xc7\x9a\x7d\x35\xdf\x3e\xc6\x89\xd7\x89\x3e\x21\xbd\x94\xc4\xc0\x31\x22\xd1\x42\x33\x8b\x4e\xea\xd1\x9e\x5b\xc6\x14\x8a\x58\x25\x54\xad\xf5\xdd\x59\xbf\xeb\x7d\xbe\xb2\x40\x0e\xc1\xd5\xf5\xfb\x9e\xdd\x05\xdd\x30\xcd\x4f\x6f\xbb\xa6\x79\xe6\x9d\xc1\x2f\x17\xde\x65\x0f\x0e\xeb\x0d\xf0\x18\x4a\x38\x91\x3e\x8d\x22\xd3\xb4\x1c\x1d\xf4\x50\x88\xb4\x69\x9a\xb7\xb7\xb7\xf5\xdb\xb7\x75\xca\xc6\xa6\xe7\x9a\x77\x12\xd7\xa1\x04\x2e\x7e\x1a\x62\x09\xb2\x1e\x88\x40\x3f\xd5\x5a\xdf\x19\x86\x36\x10\x93\x08\x03\x4a\x02\x50\x44\x02\xcc\x88\xf4\x1b\xa9\x36\x90\xa8\x79\xd3\x34\xc7\x44\x84\xd9\xb0\xee\xd3\xd8\x94\x32\x8c\xb3\xc4\x54\xe8\x90\x9f\xe3\x33\x94\x68\xc6\x4c\x1d\x5c\xd3\x34\x2f\xc4\x70\x69\x7b\xd0\x23\x3e\x4e\x38\x86\x37\x97\xb6\x77\xa0\x69\x5d\x9a\x4e\x18\x19\x87\x02\xde\xf8\x07\x70\xd4\x38\xfc\x11\x2e\x73\x8c\x9a\x76\x85\x59\x4c\x38\x27\x34\x01\xc2\x21\xc4\x0c\x0f\x27\x30\x66\x28\x11\x38\xa8\xc1\x88\x61\x0c\x74\x04\x7e\x88\xd8\x18\xd7\x40\x50\x40\xc9\x04\x52\xcc\x38\x4d\x80\x0e\x05\x22\x89\x0c\x33\x04\x3e\x4d\x27\x1a\x1d\x81\x08\x09\x07\x4e\x47\xe2\x16\xb1\x5c\x42\xc4\x39\xf5\x09\x12\x38\x80\x80\xfa\x59\x8c\x93\x3c\x3f\xc0\x88\x44\x98\xc3\x1b\x11\x62\xd0\x07\x05\x84\x7e\xa0\x88\x04\x18\x45\x1a\x49\x40\xbe\x9b\xbd\x52\x4d\x28\xcd\x04\x30\xcc\x05\x23\x4a\x0b\x35\x20\x89\x1f\x65\x81\xe4\x61\xf6\x3a\x22\x31\x29\x28\x48\x70\x25\x38\xd7\x04\x85\x8c\xe3\x9a\xe2\xb3\x06\x31\x0d\xc8\x48\xfe\x8b\x95\x58\x69\x36\x8c\x08\x0f\x6b\x10\x10\x89\x7a\x98\x09\x5c\x03\x2e\x07\x95\x1e\x6b\x52\x0e\x93\x32\xe0\x38\x8a\x34\x9f\xa6\x04\x73\x50\xb2\x2e\xb8\x53\x73\x24\xeb\xa9\x54\xa8\x28\x54\xc4\xe5\xc8\x6d\x48\xe3\xb2\x24\x84\x6b\xa3\x8c\x25\x84\x87\x58\xc1\x04\x14\x38\x55\x14\xa5\x37\xcb\x11\x39\x7d\x44\xa3\x88\xde\x4a\xd1\x7c\x9a\x04\xa4\xe8\x3b\x95\x91\xd1\x50\xf6\xde\xfe\xdc\xae\x09\x15\xc4\xcf\xd5\xad\x0c\x90\x2e\xac\x5a\xbc\xe2\x21\x8a\x22\x18\xe2\x42\x61\x38\x00\x92\x00\x5a\x12\x87\x49\xf2\xb2\xf4\x08\x82\x22\x48\x29\x53\xf4\x56\xc5\xac\x6b\x9a\x77\x61\xc1\xa0\x7f\xee\x7d\xea\xb8\x16\xd8\x03\xb8\x72\xfb\x1f\xed\x33\xeb\x0c\xf4\xce\x00\xec\x81\x5e\x83\x4f\xb6\x77\xd1\xbf\xf6\xe0\x53\xc7\x75\x3b\x8e\xf7\x19\xfa\xe7\xd0\x71\x3e\xc3\x7f\x6c\xe7\xac\x06\xd6\x2f\x57\xae\x35\x18\x40\xdf\xd5\xec\xcb\xab\x9e\x6d\x9d\xd5\xc0\x76\xba\xbd\xeb\x33\xdb\xf9\x00\xef\xaf\x3d\x70\xfa\x1e\xf4\xec\x4b\xdb\xb3\xce\xc0\xeb\x83\x24\x58\xa0\xb2\xad\x81\x44\x76\x69\xb9\xdd\x8b\x8e\xe3\x75\xde\xdb\x3d\xdb\xfb\x5c\xd3\xce\x6d\xcf\x91\x38\xcf\xfb\x2e\x74\xe0\xaa\xe3\x7a\x76\xf7\xba\xd7\x71\xe1\xea\xda\xbd\xea\x0f\x2c\xe8\x38\x67\xe0\xf4\x1d\xdb\x39\x77\x6d\xe7\x83\x75\x69\x39\x5e\x1d\x6c\x07\x9c\x3e\x58\x1f\x2d\xc7\x83\xc1\x45\xa7\xd7\x93\xa4\xb4\xce\xb5\x77\xd1\x77\x25\x7f\xd0\xed\x5f\x7d\x76\xed\x0f\x17\x1e\x5c\xf4\x7b\x67\x96\x3b\x80\xf7\x16\xf4\xec\xce\xfb\x9e\x95\x93\x72\x3e\x43\xb7\xd7\xb1\x2f\x6b\x70\xd6\xb9\xec\x7c\xb0\x14\x54\xdf\xbb\xb0\x5c\x4d\x4e\xcb\xb9\x83\x4f\x17\x96\x1c\x92\xf4\x3a\x0e\x74\xba\x9e\xdd\x77\xa4\x18\xdd\xbe\xe3\xb9\x9d\xae\x57\x03\xaf\xef\x7a\x73\xd0\x4f\xf6\xc0\xaa\x41\xc7\xb5\x07\x52\x21\xe7\x6e\xff\xb2\xa6\x49\x75\xf6\xcf\xe5\x14\xdb\x91\x70\x8e\x95\x63\x91\xaa\x86\x92\x45\xfa\xae\x7a\xbe\x1e\x58\x73\x84\x70\x66\x75\x7a\xb6\xf3\x61\x20\x81\xa5\x88\xb3\xc9\x75\xcd\x30\x4e\xb5\x96\x4a\x81\x77\x71\x94\xf0\x76\x45\x62\x3b\x3c\x3e\x3e\xce\xf3\x99\xbe\xdb\x24\x2e\x93\x5b\x5b\x1f\xd1\x44\x18\x23\x14\x93\x68\xd2\x84\x1f\x2e\x70\x74\x83\x05\xf1\x11\x38\x38\xc3\x3f\xd4\x60\x3e\x50\x83\x0e\x23\x28\xaa\x01\x47\x09\x37\x38\x66\x64\x74\x02\x43\x7a\x67\x70\xf2\xa7\x2c\xf9\x30\xa4\x2c\xc0\xcc\x18\xd2\xbb\x13\x50\x48\x39\xf9\x13\x37\xe1\xf0\xc7\xf4\xee\x04\x62\xc4\xc6\x24\x69\x42\xe3\x44\xe6\xd6\x10\xa3\xe0\x25\xe9\xc7\x58\x20\x90\x0b\xa7\xb6\x7e\x43\xf0\xad\x8c\x22\x5d\x46\xaf\xc0\x89\x68\xeb\xb7\x24\x10\x61\x3b\xc0\x37\xc4\xc7\x86\x7a\x78\x39\x65\x81\x39\x63\x57\x1a\xd3\xc0\x7f\x64\xe4\xa6\xad\x77\x73\x56\x0d\x6f\x92\xe2\x25\xc6\x65\xc7\x63\x4a\xe3\x9e\xa8\x4a\xc0\xb1\x68\x5f\x7b\xe7\xc6\xcf\x2f\xcc\xbe\x5a\xa5\xbd\x9c\xb9\xb7\xf5\x22\x2d\x53\x31\x77\xaa\x69\x2d\x53\x3a\xa5\xfc\x31\xa4\xc1\x04\x88\xc0\x31\xf7\x69\x8a\xdb\xba\xae\x1e\xc4\x44\xfe\x2e\x22\x8a\xfb\x21\x8e\x91\x8a\x28\x4b\x56\xf7\xcb\x59\xf3\xf6\xac\x42\x1a\xb7\x78\xf8\x95\x08\x23\x7f\x11\x53\x2a\x42\x05\x94\xd7\x06\x82\x38\x0e\x16\x93\xa4\x6f\x28\x68\x03\x05\x5f\x32\x2e\x9a\x90\xd0\x04\x9f\x40\x88\x65\x65\x6a\xc2\x61\xa3\xf1\xaf\x13\x88\x48\x82\x8d\xf9\x50\xfd\x1d\x8e\x4f\x40\x45\x40\x3e\x01\xbe\x23\xb1\x0c\x16\x94\x88\x13\x18\x22\xff\xeb\x98\xd1\x2c\x09\x0c\x9f\x46\x94\x35\xe1\xfb\xd1\x3b\xf9\x77\x59\xfd\x90\xa2\x20\x50\x5c\x49\x6f\x18\x8e\xd5\xcc\xb6\x5e\xcc\xd4\xa5\xbe\x05\x1a\x3e\xb7\x7b\x2c\x89\xb4\xa3\x1c\x95\xbc\x03\xb4\x04\x7b\xc1\x3c\x06\x20\x39\x78\xe6\x4c\x7a\x83\x99\x44\x12\x19\x28\x22\xe3\xa4\x09\x82\xa6\x65\x45\xdd\xa8\x17\x6d\x5d\xd0\x54\x3f\x6d\x99\x22\x58\x30\x9a\x67\x56\xfd\x5d\xa3\xf1\xcc\xa1\x52\xc9\x74\x40\x78\x1a\xa1\x49\x13\x86\x11\xf5\xbf\x96\x7c\x3b\x46\x77\x46\xe1\x24\xef\x1a\x8d\xf4\xae\xf4\xd2\x8f\x30\x62\x92\xa0\x08\x4b\xe3\x9b\x02\x65\xae\x1c\x40\x99\xa0\x2b\x21\x51\xd2\x96\x52\x14\x40\x2b\x20\x37\xcf\xed\x56\x65\x79\x57\x95\xb3\x5d\x88\x19\xdf\xd2\xc8\x2a\x98\x0b\x3b\x4b\x4d\xe8\xe0\xe3\x28\x2a\x66\xb7\xf5\x46\xfe\xcc\x53\xe4\xcf\x9e\x9f\x55\xd0\xe2\x25\x43\x01\xc9\x78\x13\xde\xaa\xb1\x8a\x04\x30\x1a\x95\xb2\x58\x0e\xd6\x84\xc3\xf4\x0e\x38\x8d\x48\x00\xdf\xe3\x63\xf9\xb7\x9c\x18\x46\xa3\x25\x5d\xec\x43\x76\x58\x70\xf2\x7c\x59\xe2\xdd\xc6\x80\x2b\x69\x57\x81\xdc\x16\xa5\xe6\xa7\x46\xe3\x04\x54\x89\x2a\xe6\xfb\x38\x11\x98\x55\xd9\x4b\xfd\xd7\x50\x46\x59\xb7\x9b\xf5\xee\xa7\xa3\xa3\x6e\x75\x01\x3a\x92\x7e\xad\x43\x11\x6f\x39\x81\x65\xeb\xe5\xb0\xd5\x11\x39\xfb\xb3\xd8\xec\x99\xef\xf2\x80\xfa\x5a\x52\xf9\xc9\xea\x00\x0e\x61\x3a\xe5\xf3\x0f\x1e\x30\xa2\x0c\x16\x1b\x12\x1b\x36\x84\x60\x3a\x5d\xa1\x0a\xcb\xdb\x13\xed\xd2\xe6\xc4\xda\xb4\xe2\xd3\x4a\xc9\xf8\xf3\x1c\x3c\x7f\x66\xaf\x6e\xba\x4b\x31\x5b\x38\xcf\x61\xee\x3c\xdb\x7c\x63\xef\x73\xdf\x46\xb5\xef\x97\x13\xec\xbb\x2b\x34\xa0\x31\xcb\x25\xdb\xdc\xa1\x10\x03\x41\xc8\xf0\xa8\xad\xef\xf2\xd5\xf6\x99\xfd\x61\x96\x34\xcf\xcf\xcf\x8b\xe4\x1b\x60\x9f\x32\xf5\x4d\x6e\xb6\x3c\x28\x2d\x08\x8e\xe4\x72\xa0\x94\xb7\x87\x34\x0a\xaa\x13\xb7\x9f\x31\x2e\xb1\xa7\x94\xe4\x03\xf3\x86\x82\x24\x0a\x69\xd1\x57\xac\x24\xf8\x9f\x24\x63\x0a\x9f\xfa\x88\x3a\xa2\x2c\x6e\x82\x8f\x52\x22\x50\x44\xfe\xc4\x95\x49\xff\xed\x8f\x3f\xe3\x00\x55\xd4\xeb\xb5\x19\xc5\xb0\xd2\x72\x33\x2f\xe4\xf3\xc1\x79\xf7\x96\xde\x15\xe6\x3d\xfd\x48\xf0\x2d\x90\x64\xdb\x17\xf7\xd9\x32\x12\x55\xfa\xf0\x4a\xe2\xad\x4e\xbf\xf9\x9f\x87\xf6\x58\x2a\x8a\xc2\x6b\xc8\xfe\x3d\x21\xcb\x05\xa3\xc9\xf8\xe5\x54\xfb\xeb\xe6\x23\x25\xbf\x15\x1b\x6c\x2d\x33\x67\xf2\x1b\x78\x5d\x45\xc3\x50\xbc\x99\x9d\x9b\x58\xdd\xa9\x7b\xf5\xc3\x7f\x86\x1f\xe6\xad\xe9\xdc\xd5\x5a\xc3\x97\x33\x33\x98\xd5\x3a\x7a\xe0\xc0\xd0\xe6\x53\x3d\x2f\x2c\xcc\xe6\xb8\x83\x8a\x5a\xb0\xd8\xab\xcf\x2b\xc1\x8b\x7b\xc6\x12\x47\xfb\xe2\x1e\x0f\x6a\xf4\xc1\x53\x60\xff\xa3\xce\xb2\xdc\x61\xae\x1e\x4b\x7b\xa1\x86\x72\xd6\x6e\xad\xf5\x94\x59\x12\x60\x26\xbb\xbf\xb2\x3b\xe5\x07\xeb\x64\x13\xb5\x7f\x39\xe6\x69\xd5\x74\xc7\xf6\x6e\xf9\x48\x4b\xa5\x79\x5f\xbb\xc2\xbd\xa9\xc6\x7b\xe7\x99\x00\xad\x70\x0f\x79\xda\x3b\x3d\x3d\x26\x82\xb7\x75\xc4\xaf\x81\xf5\xff\xd9\xe6\x2e\x2f\xb7\xe6\x47\x03\x17\x0b\xae\xd9\xd0\x0b\x2c\xb9\x96\x0f\x2a\xbe\x7a\xe3\x3f\xc3\x1b\x5f\x17\x5d\xaf\x8b\xae\xd7\x45\xd7\xbe\x3b\xcb\xeb\xa2\x6b\x6f\x5a\xb6\x4d\x86\x6a\x99\x6a\x3f\xee\xf4\x11\x5b\xa1\x73\x90\xc5\xc8\xb3\x9f\xc4\x28\x1d\x4d\x5a\x3a\x69\xb2\x30\xf4\xf1\xf1\xf1\xb6\x0d\xee\xf2\xce\xee\xfa\x96\xe4\x7e\x34\x0d\xfb\xd4\xbe\x3c\x67\xeb\x72\xb4\xb1\x75\xa9\xdc\x44\x7b\xc8\xe4\x4b\xbd\xcd\xca\xb9\x86\xf2\x29\xac\xe5\x74\x55\xbe\x38\xfb\x7c\x0e\x71\xb4\x9c\xad\x94\x44\x3b\xa7\x2a\x9c\x08\x18\x4e\x76\xdb\x87\x5b\xcf\x1d\x6b\xe7\x1d\x56\x33\x43\xcb\x0c\xc8\xcd\x69\xfe\x7f\xad\x9c\x26\xf6\xad\xad\xdd\x70\xbc\x2e\x17\x71\x91\xbf\x5a\xe6\x90\x06\x13\x39\x12\x8a\x38\x3a\xd5\xb4\xea\x9b\xb9\x69\xc6\x43\x7a\x83\xd9\x37\xb8\x98\xba\x86\xaa\x7c\xa1\xe9\xef\xb8\x76\xf6\x6d\x6e\x9d\xed\x7e\xe9\xec\xdb\xdd\x39\x5b\xa2\xb9\x83\x26\x17\xb7\x4b\x1f\x73\xdd\x6c\x09\xe3\x17\xc2\xd0\xd2\x2d\xad\x38\x46\x6c\xf2\x24\x23\x97\x10\x6d\xbf\xfd\xf9\xb0\xee\x17\x14\xfe\x1b\x00\x00\xff\xff\xac\x13\x29\xe7\x22\x40\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16418, mode: os.FileMode(436), modTime: time.Unix(1483962903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
