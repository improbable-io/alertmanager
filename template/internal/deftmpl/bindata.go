// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\xff\x73\xda\xb6\xfe\x77\xff\x15\x9f\x79\xf7\x6e\xcd\x1d\x60\x92\x6e\xbd\x85\x40\xde\x51\xe2\x34\xbe\x47\x20\x67\x9c\x76\xbd\xdd\x2e\x27\x6c\x01\x6a\x6d\xc9\x93\xe4\x10\x96\xf2\xbf\xbf\x93\x6c\xc0\x0e\x26\x21\xb9\x2e\xe1\xbd\xa5\xbd\xad\x58\xd6\xe7\xfb\x57\x59\xd2\xed\x2d\x04\x78\x44\x28\x06\xf3\xea\x0a\x85\x98\xcb\x08\x51\x34\xc6\xdc\x84\xf9\xbc\xad\x9e\xcf\xd3\xe7\xdb\x5b\xc0\x34\x80\xf9\xdc\xd8\x08\x72\xe9\x76\x15\xd4\xed\x2d\xd4\xec\x1b\x89\x39\x45\xe1\xa5\xdb\x85\xf9\xdc\xfa\xd1\xd2\xf3\xc4\xbf\x39\xf6\x31\xb9\xc6\xbc\xa5\x26\xb9\xd9\x43\x0a\x93\x61\x2f\xa2\x17\xc9\xf0\x0b\xf6\xa5\x42\xfb\xbb\x02\x19\x48\x24\x13\x01\xdf\x40\xb2\xcb\x38\x5e\x80\x92\x11\xe0\x3f\x97\x2f\xcd\x11\xe1\x84\x8e\x15\x4c\x43\xc1\x68\x29\x44\xed\x54\x8f\xc2\x37\x08\x31\xcd\x53\xfc\x03\xd4\xa4\x0f\x9c\x25\x71\x17\x0d\x71\x28\x6a\x03\xc6\x25\x0e\x2e\x10\xe1\xa2\xf6\x11\x85\x09\x56\x04\xbf\x30\x42\xc1\x04\x85\x15\x52\x92\x63\x09\x6f\x14\xae\x5a\x87\x45\x11\xa3\x29\xf0\x5e\x36\x96\xc3\xb7\x07\xf3\xf9\x9b\xdb\x5b\x98\x12\x39\x29\x4e\xae\xb9\x38\x62\xd7\xb8\x48\xbd\x87\x22\x2c\x32\x35\x96\x51\x5f\x32\xbe\xb7\xfc\xb5\xc1\x36\x01\x16\x3e\x27\xb1\x24\x8c\x9a\xf7\xe8\x58\xe2\x1b\x99\xda\xf1\x2a\x24\x42\x66\x53\x39\xa2\x63\x0c\x35\x98\xcf\x53\xbe\x1a\xc6\x6a\x70\x5d\x4f\x4a\x2b\x55\xad\x48\xc5\xbe\x7a\x6a\xc1\x52\x80\x8c\xb1\x94\x78\x9b\x52\x26\x91\xe2\xa9\x80\x32\x37\xfc\x34\xbc\x03\x96\x70\x1f\x37\x52\x63\x62\x8a\x39\x92\x8c\xa7\xee\x67\x94\x28\xaa\xa0\x03\x11\x22\xff\x6b\x2d\xc0\x23\x94\x84\xb2\x26\x89\x0c\x71\xa6\x05\x89\xa3\x38\x44\xb2\xe8\x8b\xb5\x4d\x2a\x2f\xe2\x49\x84\x0a\x81\xa8\x0c\x55\x31\xd0\xb6\xc4\x37\x42\x61\x38\x44\xfe\xd7\x35\x7c\xa5\xec\x2b\xa4\xf0\x0d\x1e\x9a\x18\x12\xfa\x75\x6b\x0e\x62\x8e\x95\xb3\x98\xdb\xcd\xce\xe1\xbf\x57\x01\x3a\x6d\x6c\xc9\x01\xf1\x19\xc5\x11\xfb\x42\xb6\xe4\x41\xcd\x4f\x78\xb8\x2d\xc7\xdb\x0b\x37\x62\x4c\xa6\x49\x72\x83\x4f\x4d\x48\xec\x4f\x90\x5c\x01\x70\x16\x3d\xdd\x13\xee\x62\x8b\xb0\x10\x68\xfc\x08\x2f\x2d\xf0\x16\x2b\x6a\x41\x22\x67\x4b\x7c\xeb\xa9\xe2\x71\x9e\xbf\x8e\xd1\x0f\x09\xa6\xf2\xe9\x12\x6f\xc2\xb8\x2a\x32\x4f\xf3\xa7\x75\xbc\x84\x0a\x89\xa8\x8f\x45\x09\xde\xb5\xdc\x78\x8f\x56\x59\x2c\xc6\x98\x12\xfc\x74\x23\xdd\x87\x6c\xdd\x42\x59\x29\xd9\x90\x39\x4b\x6b\x87\x71\xa7\x72\x15\x4a\xe3\x1e\xd4\xa1\x3a\x9f\x1b\xe9\x20\xa4\x83\x3a\x47\xdf\xaf\x91\x62\x7d\xd5\x44\xaa\x39\x89\x4a\xe8\xb9\x58\xb0\xf0\x1a\x07\x77\x28\x2e\x86\xb7\xa7\xb9\x80\x58\xa3\x5a\xdd\x46\xa5\x42\x97\x8c\xc7\x7b\x53\xc1\xea\x53\xfc\x94\xc0\x34\x5e\xed\x77\x8f\xfd\xda\x79\xfd\xf3\x70\x0d\x5f\xa9\x7d\xf2\x08\x8a\x26\xba\x26\xbe\x64\x9c\xc5\x62\x65\x79\x89\x24\xbe\x2a\xda\xea\xd5\x1c\x8f\x0b\xa7\x75\xad\x62\x2a\x89\x9c\x5d\x05\x44\xc4\x21\x9a\x5d\x6d\xe8\x7d\x1e\xce\x7d\xeb\x98\x23\x46\x89\x64\x4a\x21\x57\x92\xb1\xf0\x91\x55\x25\x8f\x1b\x47\x88\x84\x2b\x3f\x58\x2d\x2f\x1e\xcd\x65\x11\xd3\x44\x46\x9a\x2d\xa3\xf9\xc3\x49\xbf\xe3\x7d\xbe\xb0\x41\x0d\xc1\xc5\xe5\xfb\xae\xd3\x01\xb3\x6a\x59\x9f\xde\x76\x2c\xeb\xc4\x3b\x81\xdf\xce\xbc\xf3\x2e\xec\xd7\xea\xe0\x71\x44\x05\x51\xce\x86\x42\xcb\xb2\x7b\x26\x98\x13\x29\xe3\x86\x65\x4d\xa7\xd3\xda\xf4\x6d\x8d\xf1\xb1\xe5\xb9\xd6\x8d\xc2\xb5\xaf\x80\xb3\x9f\x55\x99\x83\xac\x05\x32\x30\x8f\x8d\xe6\x0f\xd5\xaa\x31\x90\xb3\x10\x03\xa2\x01\x68\x22\x01\xe6\x44\x19\x54\x75\x1f\xa0\x50\x8b\x86\x65\x8d\x89\x9c\x24\xc3\x9a\xcf\x22\x4b\xc9\x30\x4e\xa8\xa5\xd1\x21\x3f\xc5\x57\xd5\xa2\x55\x17\xea\x10\x86\x61\x78\x13\x0c\xe7\x8e\x07\x5d\xe2\x63\x2a\x30\xbc\x39\x77\xbc\x3d\xc3\xe8\xb0\x78\xc6\xc9\x78\x22\xe1\x8d\xbf\x07\x07\xf5\xfd\x9f\xe1\x3c\xc5\x68\x18\x17\x98\x47\x44\x08\xc2\x28\x10\x01\x13\xcc\xf1\x70\x06\x63\x8e\xa8\xc4\x41\x05\x46\x1c\x63\x60\x23\xf0\x27\x88\x8f\x71\x05\x24\x03\x44\x67\x10\x63\x2e\x18\x05\x36\x94\x88\x50\xe5\xff\x08\x7c\x16\xcf\x0c\x36\x02\x39\x21\x02\x04\x1b\xc9\x29\xe2\xa9\x84\x48\x08\xe6\x13\x24\x71\x00\x01\xf3\x93\x08\xd3\x34\x70\x61\x44\x42\x2c\xe0\x8d\x9c\x60\x30\x07\x19\x84\xb9\xa7\x89\x04\x18\x85\x06\xa1\xa0\xde\x2d\x5e\xe9\x95\x19\x4b\x24\x70\x2c\x24\x27\x5a\x0b\x15\x20\xd4\x0f\x93\x40\xf1\xb0\x78\x1d\x92\x88\x64\x14\x14\xb8\x16\x5c\x18\x92\x41\x22\x70\x45\xf3\x59\x81\x88\x05\x64\xa4\xfe\xc5\x5a\xac\x38\x19\x86\x44\x4c\x2a\x10\x10\x85\x7a\x98\x48\x5c\x01\xa1\x06\xb5\x1e\x2b\x4a\x0e\x8b\x71\x10\x38\x0c\x0d\x9f\xc5\x04\x0b\xd0\xb2\xae\xb8\xd3\x73\x14\xeb\xb1\x52\xa8\xcc\x54\x24\xd4\xc8\x74\xc2\xa2\xa2\x24\x44\x18\xa3\x84\x53\x22\x26\x58\xc3\x04\x0c\x04\xd3\x14\x95\x37\xab\x11\x35\x7d\xc4\xc2\x90\x4d\x95\x68\x3e\xa3\x01\xc9\x16\x63\xda\xc8\x68\xa8\x16\xa4\xfe\xd2\xae\x94\x49\xe2\xa7\xea\xd6\x06\x88\x57\x56\xcd\x5e\x89\x09\x0a\x43\x18\xe2\x4c\x61\x38\x00\x42\x01\xe5\xc4\xe1\x8a\xbc\x6a\xb1\x24\x41\x21\xc4\x8c\x6b\x7a\x77\xc5\xac\x19\x86\x77\x66\xc3\xa0\x7f\xea\x7d\x6a\xbb\x36\x38\x03\xb8\x70\xfb\x1f\x9d\x13\xfb\x04\xcc\xf6\x00\x9c\x81\x59\x81\x4f\x8e\x77\xd6\xbf\xf4\xe0\x53\xdb\x75\xdb\x3d\xef\x33\xf4\x4f\xa1\xdd\xfb\x0c\xff\x71\x7a\x27\x15\xb0\x7f\xbb\x70\xed\xc1\x00\xfa\xae\xe1\x9c\x5f\x74\x1d\xfb\xa4\x02\x4e\xaf\xd3\xbd\x3c\x71\x7a\x1f\xe0\xfd\xa5\x07\xbd\xbe\x07\x5d\xe7\xdc\xf1\xec\x13\xf0\xfa\xa0\x08\x66\xa8\x1c\x7b\xa0\x90\x9d\xdb\x6e\xe7\xac\xdd\xf3\xda\xef\x9d\xae\xe3\x7d\xae\x18\xa7\x8e\xd7\x53\x38\x4f\xfb\x2e\xb4\xe1\xa2\xed\x7a\x4e\xe7\xb2\xdb\x76\xe1\xe2\xd2\xbd\xe8\x0f\x6c\x68\xf7\x4e\xa0\xd7\xef\x39\xbd\x53\xd7\xe9\x7d\xb0\xcf\xed\x9e\x57\x03\xa7\x07\xbd\x3e\xd8\x1f\xed\x9e\x07\x83\xb3\x76\xb7\xab\x48\x19\xed\x4b\xef\xac\xef\x2a\xfe\xa0\xd3\xbf\xf8\xec\x3a\x1f\xce\x3c\x38\xeb\x77\x4f\x6c\x77\x00\xef\x6d\xe8\x3a\xed\xf7\x5d\x3b\x25\xd5\xfb\x0c\x9d\x6e\xdb\x39\xaf\xc0\x49\xfb\xbc\xfd\xc1\xd6\x50\x7d\xef\xcc\x76\x0d\x35\x2d\xe5\x0e\x3e\x9d\xd9\x6a\x48\xd1\x6b\xf7\xa0\xdd\xf1\x9c\x7e\x4f\x89\xd1\xe9\xf7\x3c\xb7\xdd\xf1\x2a\xe0\xf5\x5d\x6f\x09\xfa\xc9\x19\xd8\x15\x68\xbb\xce\x40\x29\xe4\xd4\xed\x9f\x57\x0c\xa5\xce\xfe\xa9\x9a\xe2\xf4\x14\x5c\xcf\x4e\xb1\x28\x55\x43\xc1\x22\x7d\x57\x3f\x5f\x0e\xec\x25\x42\x38\xb1\xdb\x5d\xa7\xf7\x61\xa0\x80\x95\x88\x8b\xc9\x35\xa3\x5a\x3d\x36\x9a\x3a\x05\xde\x44\x21\x15\xad\x92\xc4\xb6\x7f\x78\x78\x98\xe6\x33\x73\xbb\x49\x42\x25\xb7\x96\x39\x62\x54\x56\x47\x28\x22\xe1\xac\x01\x3f\x9d\xe1\xf0\x1a\x4b\xe2\x23\xe8\xe1\x04\xff\x54\x81\xe5\x40\x05\xda\x9c\xa0\xb0\x02\x02\x51\x51\x15\x98\x93\xd1\x11\x0c\xd9\x4d\x55\x90\xbf\x54\x2d\x86\x21\xe3\x01\xe6\xd5\x21\xbb\x39\x02\x8d\x54\x90\xbf\x70\x03\xf6\x7f\x8e\x6f\x8e\x20\x42\x7c\x4c\x68\x03\xea\x47\x2a\xb7\x4e\x30\x0a\x5e\x92\x7e\x84\x25\x02\x55\x51\x5b\xe6\x35\xc1\x53\x15\x45\xa6\x8a\x5e\x89\xa9\x6c\x99\x53\x12\xc8\x49\x2b\xc0\xd7\xc4\xc7\x55\xfd\xf0\x72\xca\x02\x6b\xc1\xae\x32\x66\x15\xff\x99\x90\xeb\x96\xd9\x49\x59\xad\x7a\xb3\x18\xe7\x18\x57\xad\x88\xa5\x8c\x7b\xa4\x2b\x81\xc0\xb2\x75\xe9\x9d\x56\x7f\x7d\x61\xf6\xf5\xa7\x8b\x97\x33\xf7\x7d\xbd\x48\xd3\xd2\xcc\x1d\x1b\x46\xd3\x52\x4e\xa9\x7e\x0c\x59\x30\x03\x22\x71\x24\x7c\x16\xe3\x96\x69\xea\x07\x39\x53\xbf\xb3\x88\x12\xfe\x04\x47\x48\x47\x94\xad\xaa\xfb\xf9\xa2\xf7\x7d\x56\x21\xab\x53\x3c\xfc\x4a\x64\x35\x7d\x11\x31\x26\x27\x1a\x28\xad\x0d\x04\x09\x1c\xac\x26\x29\xdf\xd0\xd0\x55\x14\x7c\x49\x84\x6c\x00\x65\x14\x1f\xc1\x04\xab\xca\xd4\x80\xfd\x7a\xfd\x5f\x47\x10\x12\x8a\xab\xcb\xa1\xda\x3b\x1c\x1d\x81\x8e\x80\x74\x02\xfc\x40\x22\x15\x2c\x88\xca\x23\x18\x22\xff\xeb\x98\xb3\x84\x06\x55\x9f\x85\x8c\x37\xe0\xc7\xd1\x3b\xf5\x37\xaf\x7e\x88\x51\x10\x68\xae\x94\x37\x0c\xc7\x7a\x66\xcb\xcc\x66\x9a\x4a\xdf\x12\x0d\x9f\xdb\x3d\x72\x22\x6d\x29\x47\x29\xef\x00\x4d\xc9\x5f\x30\x8f\x01\x28\x0e\x9e\x39\x93\x5e\x63\xae\x90\x84\x55\x14\x92\x31\x6d\x80\x64\x71\x51\x51\xd7\xfa\x45\xcb\x94\x2c\x36\x8f\x9b\x96\x0c\x56\x8c\xa6\x99\xd5\x7c\x57\xaf\x3f\x73\xa8\x94\x32\x9d\x2d\xad\x1a\x30\x0c\x99\xff\xb5\xe0\xdb\x11\xba\xa9\x66\x4e\xf2\xae\x5e\x8f\x6f\x0a\x2f\xfd\x10\x23\xae\x08\xca\x49\x61\x7c\x53\xa0\x2c\x95\x03\x28\x91\xec\x4e\x48\x14\xb4\xa5\x15\x05\xd0\x0c\xc8\xf5\x73\xbb\x55\x51\xde\xbb\xca\xb9\x5f\x88\x05\xdf\xca\xc8\x3a\x98\x33\x3b\x2b\x4d\x98\xe0\xe3\x30\xcc\x66\xb7\xcc\x7a\xfa\x2c\x62\xe4\x2f\x9e\x9f\x55\xd0\xec\x25\x47\x01\x49\x44\x03\xde\xea\xb1\x92\x04\x30\x1a\x15\xb2\x58\x0a\xd6\x80\xfd\xf8\x06\x04\x0b\x49\x00\x3f\xe2\x43\xf5\xb7\x98\x18\x46\xa3\x9c\x2e\x76\x21\x3b\xac\x38\x79\xbe\x2c\xf1\x6e\x63\xc0\x15\xb4\xab\x41\xa6\x59\xa9\xf9\xa5\x5e\x3f\x02\x5d\xa2\xb2\xf9\x3e\xa6\x12\xf3\x32\x7b\xe9\xff\xea\xda\x28\xeb\x76\xb3\xdf\xfd\x72\x70\xd0\x29\x2f\x40\x07\xca\xaf\x4d\xc8\xe2\x2d\x25\x90\xb7\x5e\x0a\x5b\x1e\x91\x8b\x3f\xab\x1d\xd0\xe5\xd6\x27\xe8\x8f\x25\xa5\xdf\x92\xf6\x60\x1f\xe6\x73\xb1\xfc\xe0\x01\x23\xc6\x61\xb5\x4b\xb7\x61\x97\x14\xe6\xf3\x3b\x54\x21\xbf\x67\xd7\x2a\xec\xd8\xad\x4d\xcb\x3e\xad\x14\x8c\xbf\xcc\xc1\xcb\x67\xfe\xea\xa6\xdb\x14\xb3\x95\xf3\xec\xa7\xce\x73\x9f\x6f\xec\x7c\xee\xdb\xa8\xf6\xdd\x72\x82\x5d\x77\x85\x3a\xd4\x17\xb9\xe4\x3e\x77\xc8\xc4\x40\x30\xe1\x78\xd4\x32\xb7\xf9\xe8\xfe\xcc\xfe\xb0\x48\x9a\xa7\xa7\xa7\x59\xf2\x0d\xb0\xcf\xb8\xfe\x26\xb7\x58\x1e\x14\x16\x04\x07\x6a\x39\x50\xc8\xdb\x43\x16\x06\xe5\x89\xdb\x4f\xb8\x50\xd8\x63\x46\xd2\x81\x65\x43\x41\xa8\x46\x9a\xf5\x15\x77\x12\xfc\x2f\x8a\x31\x8d\x4f\x7f\x44\x1d\x31\x1e\x35\xc0\x47\x31\x91\x28\x24\x7f\xe1\xd2\xa4\xff\xf6\xe7\x5f\x71\x80\x4a\xea\xf5\xda\x8c\x6c\x58\x6b\xb9\x91\x16\xf2\xe5\xe0\xb2\x7b\x8b\x6f\x32\xf3\x1e\x7f\x24\x78\x0a\x84\xc2\x83\x5f\xc7\x9b\x16\x2a\xf5\xe1\x3b\x89\xb7\x3c\xfd\xa6\x7f\x1e\xda\xfc\x28\x29\x0a\xaf\x21\xfb\xf7\x84\xac\x90\x9c\xd1\xf1\xcb\xa9\xf6\xf7\xcd\xe7\xac\xfe\xc8\x76\xbe\x9a\x56\xca\xe4\x77\xf0\xba\x92\x86\x21\x7b\xb3\x38\x4c\x74\x77\x0b\xed\xd5\x0f\xff\x19\x7e\x98\xb6\xa6\x4b\x57\x6b\x0e\x5f\xce\xcc\x60\x95\xeb\xe8\x81\x53\x74\x9b\x8f\xba\xbd\xb0\x30\x9b\xe3\x0e\x4a\x6a\xc1\x6a\x13\x3d\xad\x04\x2f\xee\x19\x39\x8e\x76\xc5\x3d\x1e\xd4\xe8\x83\x47\x23\xff\x47\x9d\x25\xdf\x61\xde\x3d\xab\xf9\x42\x0d\xe5\xa2\xdd\x5a\xeb\x29\x13\x1a\x60\xae\xba\xbf\xa2\x3b\xa5\xa7\x4d\x55\x13\xb5\x7b\x39\xe6\x69\xd5\x74\xcb\xf6\x2e\x7f\xd6\xa4\xd4\xbc\xaf\x5d\xe1\xce\x54\xe3\x9d\xf3\x4c\x80\xe6\x64\x07\x79\xda\x39\x3d\x3d\x26\x82\xef\xeb\x88\x5f\x03\xeb\xff\xb3\xcd\xcd\x2f\xb7\x96\x67\xf6\x56\x0b\xae\xc5\xd0\x0b\x2c\xb9\xf2\x27\x08\x5f\xbd\xf1\x9f\xe1\x8d\xaf\x8b\xae\xd7\x45\xd7\xeb\xa2\x6b\xd7\x9d\xe5\x75\xd1\xb5\x33\x2d\xdb\x26\x43\x35\x2d\xbd\x1f\x77\xfc\x88\xad\xd0\x25\xc8\x6a\xe4\xd9\x4f\x62\x14\x8e\x26\xe5\x4e\x9a\xac\x0c\x7d\x78\x78\x78\xdf\x06\x77\x71\x67\x77\x7d\x4b\x72\x37\x9a\x86\x5d\x6a\x5f\x9e\xb3\x75\x39\xd8\xd8\xba\x94\x6e\xa2\x3d\x64\xf2\x5c\x6f\x73\xe7\x5c\x43\xf1\x14\x56\x3e\x5d\x15\x6f\x93\x3f\x9f\x43\x1c\xe4\xb3\x95\x96\x68\xeb\x54\x85\xa9\x84\xe1\x6c\xbb\x7d\xb8\xf5\xdc\xb1\x76\xde\xe1\x6e\x66\x68\x5a\x01\xb9\x3e\x4e\xff\x6f\x14\xd3\xc4\xae\xb5\xb5\x1b\x8e\xd7\xa5\x22\xae\xf2\x57\xd3\x1a\xb2\x60\xa6\x46\x26\x32\x0a\x8f\x0d\xa3\xfc\xfe\x4e\x9c\x88\x09\xbb\xc6\xfc\x3b\xdc\xd6\x5e\x43\xf5\xf7\xdf\x07\xfb\x3e\xd7\xc1\xb6\xbf\x0d\xf6\xfd\x2e\x83\xe5\x68\x6e\xa1\xc9\xd5\x95\xeb\xc7\x5c\xab\xcc\x61\xfc\x42\x38\xca\xdd\xd2\x8a\x22\xc4\x67\x4f\x32\x72\x01\xd1\xfd\xb7\x9c\x1f\xd6\xfd\x8a\xc2\x7f\x03\x00\x00\xff\xff\x8e\xb7\x99\xbd\x37\x43\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 17207, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
